Map volumes for logfiles of a container 
docker run - d -P - v path/:logpathof container log tomcat

Docker top imageid (will give the details of the process running under the container) 
Docker inspect (will give all the detailed configuration of tje container) 

Docker stats (will give the resouce utilization of each container) 
Docker run --name kaushik -d -P tomcat (to assign specific container name) 
Docker run -d -p 1234:8080 tomcat (to assign a specific port no) 

there are many docker images available on hub.docker.com, we can just pull them & start running containers

	docker search <image name> -- to search the docker images from command line
	docker pull <image name> -- to pull a docker image from docker hub	

	docker images -- to display the images on your local machine
	docker history < image name > -- to know the changes done to the image
	docker inspect < image name > -- to view the detaied information in JSON output
	docker rmi <image name> -- to remove a image from local machine
	docker image prune -- to remove all unused images from local machine
	
how to run containers from a docker image 

	two ways we can run the images 
		interative mode ( -it )
		detached mode  ( -d )
	
	docker run -d nginx ( always creates new container & detaches from the terminal you are working on ( goes in background process )) 
	docker run -it nginx bash ( always creates new container & gets inside the container )
	docker ps -- to check all running containers 
	docker ps -a -- to check all running + exited/stopped containers
	
	docker stop <container id> -- to stop a container 
	docker start <container id> -- to start a stopped container 
	docker restart <container id> -- to restart a container 
	docker inspect <container id> -- to view detailed information about the continaer in JSON format
	docker rm <container id> -- to remove a stopped/exited container
	docker rm -f <container id> -- to remove a container forcefully though it is in running state 
	docker container prune -- to remove all stopped/exited containers
	
how to get inside a running container

	docker run -d nginx ( creates a new container in detached mode )
	docker ps  -- displays the running containers, note down the container id
	docker exec -it <container id> bash 

how to come out of a container
	ctrl pq ( it is mandatory to use this command always )
	
how to access the applications running inside the container from external world ( browser )
	
	services running inside a container can never be accessed direcltry, we always need to publish/expose them on to docker host while we create the containers 
	
	we need to publish/expose the services using -P (capital) OR -p (small) with in the docker run command  
	
	ex: -P ( capital ) -- docker will publish/expose the port number dynamically on docker host & maps with port running inside the cont
	
		docker run -d -P nginx -- which create a new port mapping from docker host to the service inside the container 
		docker ps -- to check the container port 
		to access : in the browser http://<docker host IP>:<exposed port>  ex: http://52.14.62.88:32768
	
		-p ( small ) -- we need to assign a port on docker host & map to the port inside the container 
		
		docker run -d -p 1234:80 nginx ( always port-on-docker-host : process-port-inside-container )
		docker ps -- to check the container port 
		to access : in the browser http://<docker host IP>:<exposed port>  ex: http://52.14.62.88:1234


how to build docker image 
	
	two ways 
		MANAUL 
		AUTOMATED 
	
	Manual Process 
		choose a base image 
		run it as cotnainer in interactive mode
		make neccessary changes inside the container 
		come out of container safely ( ctrl pq )
		freeze the changes made inside container to covert it as image ( use docker commit command )
		
		ex: 
			docker pull ubuntu
			docker run -it ubuntu bash 
				< inside contianer changes >
				apt-get update
				apt-get install -y nginx
				apt-get install -y vim
				mkdir /home/configuration
				touch /home/configuration/db.props
				vi /var/www/html/index.html ( edit & save file )
			ctrl pq ( to comeout of contianer safely )
			docker commit -m "installed nginx" -c 'CMD /usr/sbin/nginx -g "daemon off;"' -c 'EXPOSE 80' <cont id> <new image name>

		while commiting the changes made to a container below are mandatory 
		    -m -- a message what changes are made 
			CMD -- a command that would start a process inside the container 
			EXPOSE -- port number on which process inside container runs always 
		    cont id -- in which the changes are made will have to be freezed / saved
			new image name -- anyname for your new image ( ex: mynginx )

	Automated process ( real time practice )
	
		create a simple text file & write the all the instructions build an image
		
		vi mydockerfile
			FROM ubuntu
			RUN apt-get udpate
			RUN apt-get install -y nginx vim
			RUN mkdir /home/config/
			RUN touch /home/config/db.props
			EXPOSE 80
			CMD /usr/sbin/nginx -g "daemon off;"
		save&quit 
		
		docker build -t <new image name> -f /path/to/mydockerfile . (context "." (currnet directory))

how to push docker images into docker hub
	create an account in hub.docker.com
		create a reportsitory after logged into the account (ex: myapp)
		on docker host
		docker login 
			username: docker hub username
			password: docker hub passwd
		ensure you get "Login Succeeded" message
		
                docker tag local-image:tagname new-repo:tagname
                    docker tag myapp:v1 leaddevops/myapp:v1
                docker push new-repo:tagname
                     docker push leaddevops/myapp:v1
        
how to push images to private repo ---- DTR ( docker trusted registry )
          goto mydockerrepo.com & create an acct
          inside the acct create a repo
          come back to the server & login to the private repo ( docker login mydockerrepo.com ) provide uid/pwd
          docker tag local-image:tagname new-repo:tagname
                    docker tag myapp-mytomcat:v1 mydockerrepo.com/leaddevops/myappibm:v1
          docker push new-repo:tagname
                     docker push mydockerrepo.com/leaddevops/myappibm:v1
                     
		     
how to push images to private repo ( registry container by docker )
          docker run -d -p 5000:5000 --restart always --name registry registry:2
          local registry container address -- localhost:5000
          docker tag local-image:tagname new-repo:tagname
                    docker tag myapp-mytomcat:v1 localhost:5000/myappibm:v1
          docker push new-repo:tagname
                     docker push localhost:5000/myappibm:v1


how to push images offline ( docker save & docker load )
    docker save -o mycentos.tgz mycentos:v1
    scp mycentos.tgz to target machine / server
    docker load < mycentos.tgz
=====================================================================================================================================


